$date
	Thu Apr 25 16:56:23 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module main $end
$var wire 1 ! a $end
$var wire 1 " b $end
$var wire 1 # do_nothing $end
$var wire 1 $ is_flushing_wire $end
$var wire 1 % is_geZero_calc $end
$var wire 1 & is_lZero_calc $end
$var wire 1 ' is_load_calc $end
$var wire 1 ( is_mis_load $end
$var wire 1 ) is_mis_st_aft_st_bottom $end
$var wire 1 * is_mis_st_aft_st_upper $end
$var wire 1 + is_mis_store $end
$var wire 1 , is_mis_store_then_mis_load_calc $end
$var wire 1 - is_nZero_calc $end
$var wire 1 . is_stall $end
$var wire 1 / is_store_calc $end
$var wire 1 0 is_zero_calc $end
$var wire 16 1 movh_res [15:0] $end
$var wire 16 2 vb_or_vt_calc [15:0] $end
$var wire 1 3 w_mem_en_calc $end
$var wire 1 4 w_reg_en_calc $end
$var wire 1 5 z $end
$var wire 1 6 y $end
$var wire 1 7 x $end
$var wire 16 8 vb_or_vt_wire_exec1 [15:0] $end
$var wire 16 9 va_wire_exec1 [15:0] $end
$var wire 16 : va [15:0] $end
$var wire 16 ; upper_mis_st_val [15:0] $end
$var wire 16 < true_instr [15:0] $end
$var wire 16 = sub_res [15:0] $end
$var wire 4 > rt [3:0] $end
$var wire 16 ? res_wb [15:0] $end
$var wire 16 @ res_exec2 [15:0] $end
$var wire 16 A reg_pc_or_changed [15:0] $end
$var wire 16 B read_data_2 [15:0] $end
$var wire 4 C read_addr_2 [3:0] $end
$var wire 4 D rb [3:0] $end
$var wire 4 E ra [3:0] $end
$var wire 4 F opcode [3:0] $end
$var wire 16 G movl_res [15:0] $end
$var wire 16 H misaligned_instr [15:0] $end
$var wire 16 I mis_st_val_or_norm [15:0] $end
$var wire 16 J mis_load_val [15:0] $end
$var wire 16 K mem_rdata1 [15:0] $end
$var wire 16 L mem_rdata0 [15:0] $end
$var wire 1 M is_sub_calc $end
$var wire 1 N is_movl_calc $end
$var wire 1 O is_movh_calc $end
$var wire 1 P is_loadStore_calc $end
$var wire 1 Q is_jumping_wire $end
$var wire 1 R is_jump_calc $end
$var wire 8 S imm_val_calc [7:0] $end
$var wire 16 T hijack_or_reg [15:0] $end
$var wire 1 U halt_calc $end
$var wire 16 V forward_va_exec1 [15:0] $end
$var wire 16 W correct_instr [15:0] $end
$var wire 1 X clk $end
$var wire 16 Y bp_out [15:0] $end
$var wire 16 Z bottom_mis_st_val [15:0] $end
$var reg 16 [ buffer_dec [15:0] $end
$var reg 16 \ correct_instr_reg [15:0] $end
$var reg 1 ] d_0 $end
$var reg 16 ^ delay_vb_or_vt [15:0] $end
$var reg 1 _ do_nothing_reg $end
$var reg 1 ` e_1 $end
$var reg 1 a e_2 $end
$var reg 1 b f_1 $end
$var reg 1 c f_2 $end
$var reg 1 d halt $end
$var reg 1 e halt_dec $end
$var reg 1 f halt_exec1 $end
$var reg 1 g halt_exec2 $end
$var reg 8 h imm_val_dec [7:0] $end
$var reg 8 i imm_val_exec1 [7:0] $end
$var reg 16 j instruction [15:0] $end
$var reg 1 k is_flushing $end
$var reg 1 l is_frwd_mem_exec2 $end
$var reg 1 m is_frwd_mem_mis1_exec2 $end
$var reg 1 n is_frwd_mem_mis2_exec2 $end
$var reg 1 o is_geZero_dec $end
$var reg 1 p is_geZero_exec1 $end
$var reg 1 q is_geZero_exec2 $end
$var reg 1 r is_jump_dec $end
$var reg 1 s is_jump_exec1 $end
$var reg 1 t is_jump_exec2 $end
$var reg 1 u is_jump_wb $end
$var reg 1 v is_jump_wb_2 $end
$var reg 1 w is_jump_wb_3 $end
$var reg 1 x is_jumping $end
$var reg 1 y is_lZero_dec $end
$var reg 1 z is_lZero_exec1 $end
$var reg 1 { is_lZero_exec2 $end
$var reg 1 | is_load_dec $end
$var reg 1 } is_load_exec1 $end
$var reg 1 ~ is_load_exec2 $end
$var reg 1 !" is_mis_load_exec1 $end
$var reg 1 "" is_mis_load_exec2 $end
$var reg 1 #" is_mis_st_aft_st_bottom_exec2 $end
$var reg 1 $" is_mis_st_aft_st_upper_exec2 $end
$var reg 1 %" is_mis_store_exec1 $end
$var reg 1 &" is_mis_store_exec2 $end
$var reg 1 '" is_mis_store_then_mis_load_exec1 $end
$var reg 1 (" is_movh_dec $end
$var reg 1 )" is_movh_exec1 $end
$var reg 1 *" is_movl_dec $end
$var reg 1 +" is_movl_exec1 $end
$var reg 1 ," is_nZero_dec $end
$var reg 1 -" is_nZero_exec1 $end
$var reg 1 ." is_nZero_exec2 $end
$var reg 1 /" is_store_dec $end
$var reg 1 0" is_store_exec1 $end
$var reg 1 1" is_store_exec2 $end
$var reg 1 2" is_sub_dec $end
$var reg 1 3" is_sub_exec1 $end
$var reg 1 4" is_zero_dec $end
$var reg 1 5" is_zero_exec1 $end
$var reg 1 6" is_zero_exec2 $end
$var reg 16 7" mem_overload_exec2 [15:0] $end
$var reg 16 8" mis_store_then_mis_load_val_exec1 [15:0] $end
$var reg 4 9" opcode_dec [3:0] $end
$var reg 4 :" opcode_reg_exec1 [3:0] $end
$var reg 16 ;" pc [15:0] $end
$var reg 16 <" pc_dec [15:0] $end
$var reg 16 =" pc_exec1 [15:0] $end
$var reg 16 >" pc_exec2 [15:0] $end
$var reg 16 ?" pc_fetch2 [15:0] $end
$var reg 16 @" pc_wb [15:0] $end
$var reg 4 A" ra_dec [3:0] $end
$var reg 4 B" ra_exec1 [3:0] $end
$var reg 4 C" ra_exec2 [3:0] $end
$var reg 4 D" rb_or_rt_dec [3:0] $end
$var reg 4 E" rb_or_rt_exec1 [3:0] $end
$var reg 16 F" res_reg_exec2 [15:0] $end
$var reg 4 G" rt_dec [3:0] $end
$var reg 4 H" rt_exec1 [3:0] $end
$var reg 4 I" rt_exec2 [3:0] $end
$var reg 16 J" va_exec1 [15:0] $end
$var reg 16 K" va_exec2 [15:0] $end
$var reg 16 L" vb_or_vt_exec1 [15:0] $end
$var reg 16 M" vb_or_vt_exec2 [15:0] $end
$var reg 1 N" w_mem_en_dec $end
$var reg 1 O" w_mem_en_exec1 $end
$var reg 1 P" w_mem_en_exec2 $end
$var reg 1 Q" w_reg_en_dec $end
$var reg 1 R" w_reg_en_exec1 $end
$var reg 1 S" w_reg_en_exec2 $end
$var reg 1 T" was_stall $end
$var reg 1 U" was_stall2 $end
$var reg 1 V" wb_0 $end
$scope module bp $end
$var wire 16 W" key_ [15:0] $end
$var wire 16 X" value_ [15:0] $end
$var wire 16 Y" wKey_ [15:0] $end
$var wire 1 Z" wen $end
$var wire 16 [" prediction_ [15:0] $end
$var wire 1 X clk $end
$var integer 32 \" i [31:0] $end
$upscope $end
$scope module c0 $end
$var wire 1 X clk $end
$var reg 1 ]" theClock $end
$upscope $end
$scope module ctr $end
$var wire 1 X clk $end
$var wire 1 d isHalt $end
$var reg 32 ^" count [31:0] $end
$upscope $end
$scope module mem $end
$var wire 1 X clk $end
$var wire 15 _" raddr0_ [15:1] $end
$var wire 15 `" raddr1_ [15:1] $end
$var wire 16 a" rdata0_ [15:0] $end
$var wire 16 b" rdata1_ [15:0] $end
$var wire 15 c" waddr [15:1] $end
$var wire 16 d" wdata [15:0] $end
$var wire 1 e" wen $end
$var reg 15 f" raddr0 [15:1] $end
$var reg 15 g" raddr1 [15:1] $end
$var reg 16 h" rdata0 [15:0] $end
$var reg 16 i" rdata1 [15:0] $end
$upscope $end
$scope module regs $end
$var wire 1 X clk $end
$var wire 4 j" raddr0_ [3:0] $end
$var wire 4 k" raddr1_ [3:0] $end
$var wire 16 l" rdata0 [15:0] $end
$var wire 16 m" rdata1 [15:0] $end
$var wire 4 n" waddr [3:0] $end
$var wire 16 o" wdata [15:0] $end
$var wire 1 p" wen $end
$var reg 4 q" raddr0 [3:0] $end
$var reg 4 r" raddr1 [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx r"
bx q"
0p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
0e"
bx d"
bx c"
bx b"
bx a"
bx `"
b0 _"
b0 ^"
1]"
b100000000000 \"
b10 ["
0Z"
bx Y"
bx X"
b0 W"
0V"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
b0 ;"
bx :"
bx 9"
bx 8"
bx 7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
0k
bx j
bx i
bx h
xg
xf
xe
0d
0c
1b
0a
0`
x_
bx ^
0]
bx \
bx [
bx Z
b10 Y
1X
bx W
bx V
xU
bx T
bx S
xR
xQ
xP
xO
xN
xM
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
b0 A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
x7
x6
x5
x4
x3
bx 2
bx 1
x0
x/
0.
x-
0,
0+
0*
0)
0(
x'
x&
x%
x$
x#
1"
0!
$end
#500
0X
0]"
#1000
b1 _"
b10 A
b100 Y
b100 ["
b1 ^"
b0 f"
1c
b0 ?"
0T"
0!"
0%"
0'"
xk
0n
0m
0$"
0#"
b10 ;"
b10 W"
0u
1X
1]"
#1500
0X
0]"
#2000
0U
14
00
0-
0&
0%
0'
03
0/
b0 C
b0 k"
b10 _"
0M
1N
0O
0R
0P
b1000 F
b110 E
b110 j"
b1000 D
b0 >
b1101000 S
b100 A
b10000000xxxxxxxx J
b10000110xxxxxxxx ;
b1000011010000000 <
b110 Y
b110 ["
b10000000xxxxxxxx H
0v
b100 ;"
b100 W"
b0 7"
0l
0&"
0""
0U"
b0 <"
b10 ?"
1]
b1000011010000000 L
b1000011010000000 a"
b1000011010000000 h"
b1 f"
b10 ^"
1X
1]"
#2500
0X
0]"
#3000
b101 D
b1100101 S
b11 _"
b1010000xxxxxxxx J
b1000011001010000 <
b110 A
b101000010000110 H
b1000 Y
b1000 ["
b11 ^"
b1000011001010000 L
b1000011001010000 a"
b1000011001010000 h"
b10 f"
b0 r"
b110 q"
1`
b100 ?"
0e
b10 <"
1Q"
0N"
b0 G"
b0 D"
b110 A"
b1000 9"
b1101000 h
0/"
0|
0o
0y
0,"
04"
0r
0("
1*"
02"
b1000011010000000 j
b0 ="
b110 ;"
b110 W"
0w
1X
1]"
#3500
0X
0]"
#4000
0$
1#
0Q
b100 _"
b1100 D
b1101100 S
b1000 A
b110100000000000 1
b1101000 @
b11000000xxxxxxxx J
b1000011011000000 <
b1010 Y
b1010 ["
b10 W
b0 8
b1100000010000110 H
b1000 ;"
b1000 W"
b0 >"
b10 ="
0f
1R"
0O"
b0 L"
b0 H"
b0 E"
b110 B"
b1000 :"
b1101000 G
b1101000 i
00"
0}
0p
0z
0-"
05"
0s
0)"
1+"
03"
b100 <"
b1100101 h
b1000011001010000 j
b110 ?"
1a
b1000011011000000 L
b1000011011000000 a"
b1000011011000000 h"
b11 f"
b100 ^"
1X
1]"
#4500
0X
0]"
#5000
b1101000 ?
b1101000 o"
b101 _"
b1100101 @
b110010100000000 1
1p"
b1010 A
b100 W
b0xxxxxxxx Z
b1000011000000000 ;
b0 I
b0 d"
b1100 Y
b1100 ["
b101 ^"
b100 f"
1V"
b1000 ?"
b110 <"
b1101100 h
b1000011011000000 j
b100 ="
b1100101 G
b1100101 i
b10 \
1_
0k
b10 >"
b0 M"
b0 X"
b1101000 F"
0g
1S"
0P"
b0 I"
b0 n"
b110 C"
01"
0~
0q
0{
0."
06"
0t
0x
b1010 ;"
b1010 W"
b0 @"
b0 Y"
1X
1]"
#5500
0X
0]"
#6000
0$
b110 _"
b1100101 ?
b1100101 o"
1#
b1111 D
b1101111 S
b1100 A
b1101100 @
b110110000000000 1
b11110000xxxxxxxx J
b1000011011110000 <
b1110 Y
b1110 ["
b110 W
b1111000010000110 H
b1100 ;"
b1100 W"
b0 ^
b10 @"
b10 Y"
b100 \
b100 >"
b1100101 F"
b110 ="
b1101100 G
b1101100 i
b0 8"
b1000 <"
b1010 ?"
b1101000 2
b1101000 B
b1101000 m"
b1000011011110000 L
b1000011011110000 a"
b1000011011110000 h"
b101 f"
b110 ^"
1X
1]"
#6500
0X
0]"
#7000
b0 E
b0 j"
b1010 D
b1010 S
b1101100 ?
b1101100 o"
b111 _"
b10100000xxxxxxxx J
b1000000000000000 ;
b1000000010100000 <
b1110 A
b1010000010000110 H
b1000 W
b10000 Y
b10000 ["
b111 ^"
b1000000010100000 L
b1000000010100000 a"
b1000000010100000 h"
b110 f"
b1100101 2
b1100101 B
b1100101 m"
b1100 ?"
b1010 <"
b1101111 h
b1000011011110000 j
b1000 ="
b110 \
b110 >"
b1101100 F"
b1110 ;"
b1110 W"
b100 @"
b100 Y"
1X
1]"
#7500
0X
0]"
#8000
1U
04
0$
b0 `"
b1111 C
b1111 k"
b1000 _"
1#
b0 T
0N
1P
b1111 F
b1111 E
b1111 j"
b1111 D
b1111 >
b11111111 S
b10000 A
b1101111 @
b110111100000000 1
b11111111xxxxxxxx J
b1111111100000000 ;
b1111111111111111 <
b10010 Y
b10010 ["
b1010 W
b0 V
b1111111110000000 H
b10000 ;"
b10000 W"
b110 @"
b110 Y"
b1000 \
b1000 >"
b1010 ="
b1101111 G
b1101111 i
b1100 <"
b0 A"
b1010 h
b1000000010100000 j
b1110 ?"
b1101100 2
b1101100 B
b1101100 m"
b1101100 :
b1101100 l"
b0 q"
b1111111111111111 L
b1111111111111111 a"
b1111111111111111 h"
b111 f"
b1000 ^"
1X
1]"
#8500
0X
0]"
#9000
x4
xU
x0
x-
x&
x%
x'
x3
x/
bx C
bx k"
bx `"
xM
xN
xO
xR
xP
bx F
bx E
bx j"
bx D
bx >
bx S
bx T
b1101111 ?
b1101111 o"
b1001 _"
bx J
bx00000000 ;
bx <
b1010 @
b101000000000 1
b10010 A
bx11111111 H
bx V
b0 =
b0 9
b1100 W
b10100 Y
b10100 ["
b1001 ^"
bx L
bx a"
bx h"
b0 g"
b1000 f"
bx 2
bx B
bx m"
b1111 r"
bx :
bx l"
b1111 q"
b10000 ?"
1e
b1110 <"
0Q"
b1111 G"
b1111 D"
b1111 A"
b1111 9"
b11111111 h
0*"
b1111111111111111 j
b1100 ="
b0 J"
b0 B"
b1010 G
b1010 i
b1010 \
b1010 >"
b1101111 F"
b10010 ;"
b10010 W"
b1000 @"
b1000 Y"
1X
1]"
#9500
0X
0]"
#10000
0$
x.
bx _"
b1010 ?
b1010 o"
1#
x+
bx A
b11111111xxxxxxxx 1
b11111111xxxxxxxx @
x(
bx H
bx10000110 J
b10000000 Z
b10110 Y
b10110 ["
b1110 W
b0 c"
bx 8
bx =
bx 9
b10100 ;"
b10100 W"
b1010 @"
b1010 Y"
b1100 \
b1100 >"
b0 K"
b1010 F"
b0 C"
b1110 ="
1f
0R"
bx L"
bx J"
b1111 H"
b1111 E"
b1111 B"
b1111 :"
b1111111111111111 G
b11111111 i
0+"
xe
b10000 <"
xQ"
xN"
bx G"
bx D"
bx A"
bx 9"
bx h
x/"
x|
xo
xy
x,"
x4"
xr
x("
x*"
x2"
bx j
b10010 ?"
bx r"
bx q"
b1000011010000000 K
b1000011010000000 b"
b1000011010000000 i"
bx g"
b1001 f"
b1010 ^"
1X
1]"
#10500
0X
0]"
#11000
x#
x$
b11111111xxxxxxxx ?
b11111111xxxxxxxx o"
bx J
bx 1
xQ
0p"
bx @
bx W
bx Z
bx ;
bx I
bx d"
bx c"
bx Y
bx ["
b1011 ^"
bx K
bx b"
bx i"
bx f"
x`
b10xx0 ?"
b100x0 <"
b10000 ="
xf
xR"
xO"
bx H"
bx E"
bx B"
bx :"
bx G
bx i
x0"
x}
xp
xz
x-"
x5"
xs
x)"
x+"
x3"
xT"
x!"
x%"
b1110 \
b1110 >"
bx M"
bx X"
bx K"
b11111111xxxxxxxx F"
1g
0S"
b1111 I"
b1111 n"
b1111 C"
b101x0 ;"
b101x0 W"
b1100 @"
b1100 Y"
1X
1]"
#11500
0X
0]"
#12000
bx ?
bx o"
bx ;"
bx W"
0V"
1d
bx ^
b1110 @"
b1110 Y"
bx \
x_
xk
b10000 >"
bx F"
xg
xS"
xP"
bx I"
bx n"
bx C"
x1"
x~
xq
x{
x."
x6"
xt
xx
x&"
x""
b100x0 ="
xU"
bx 8"
b10xx0 <"
xa
b1100 ^"
1X
1]"
#12500
0X
0]"
#13000
x*
x)
x,
xZ"
xV"
bx ?"
b10xx0 ="
b100x0 >"
b10000 @"
b10000 Y"
1X
1]"
